{
	"info": {
		"_postman_id": "7f948663-a341-4f3a-8fac-a25a0c0ee702",
		"name": "Club",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14496932"
	},
	"item": [
		{
			"name": "Crear un club v치lido.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"clubs_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Example Club\",\r\n  \"foundationDate\": 1999,\r\n  \"image\": \"http://example.com/image.png\",\r\n  \"description\": \"This is an example description for the club.\",\r\n  \"socios\": []\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/clubs",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un club inv치lido.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"   pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should have an error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Invalid Club Example\",\r\n  \"foundationDate\": 3000,  // A침o en el futuro, inv치lido\r\n  \"image\": \"http://example.com/image.png\",\r\n  \"description\": \"This description is way too long and exceeds the 100 characters limit. This should cause a validation error in the server.\",\r\n  \"socios\": []\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/clubs",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todos los clubs.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response array should not be empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/clubs",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un club por ID.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response should have necessary properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('foundationDate');\r",
							"    pm.expect(jsonData).to.have.property('image');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('socios');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/clubs/{{clubs_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs",
						"{{clubs_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un club por un ID que no existe.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should have an error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include('not found');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/clubs/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un club.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should have updated properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.equal(\"Updated Club Name\");\r",
							"    pm.expect(jsonData.foundationDate).to.equal(2001);\r",
							"    pm.expect(jsonData.image).to.equal(\"http://example.com/new-image.png\");\r",
							"    pm.expect(jsonData.description).to.equal(\"Updated description for the club.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Updated Club Name\",\r\n  \"foundationDate\": 2001,\r\n  \"image\": \"http://example.com/new-image.png\",\r\n  \"description\": \"Updated description for the club.\",\r\n  \"socios\": []\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/clubs/{{clubs_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs",
						"{{clubs_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un club con un ID que no existe.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should have updated properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.equal(\"Updated Club Name\");\r",
							"    pm.expect(jsonData.foundationDate).to.equal(2001);\r",
							"    pm.expect(jsonData.image).to.equal(\"http://example.com/new-image.png\");\r",
							"    pm.expect(jsonData.description).to.equal(\"Updated description for the club.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Non-existent Club Name\",\r\n  \"foundationDate\": 2001,\r\n  \"image\": \"http://example.com/new-image.png\",\r\n  \"description\": \"Updated description for a non-existent club.\",\r\n  \"socios\": []\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/clubs/{{clubs_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs",
						"{{clubs_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar un club por su ID.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/clubs/{{clubs_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs",
						"{{clubs_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar un club con un ID que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/clubs/{{clubs_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clubs",
						"{{clubs_id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1"
		}
	]
}